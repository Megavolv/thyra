// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FillWebPostHandlerFunc turns a function with the right signature into a fill web post handler
type FillWebPostHandlerFunc func(FillWebPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FillWebPostHandlerFunc) Handle(params FillWebPostParams) middleware.Responder {
	return fn(params)
}

// FillWebPostHandler interface for that can handle valid fill web post params
type FillWebPostHandler interface {
	Handle(FillWebPostParams) middleware.Responder
}

// NewFillWebPost creates a new http.Handler for the fill web post operation
func NewFillWebPost(ctx *middleware.Context, handler FillWebPostHandler) *FillWebPost {
	return &FillWebPost{Context: ctx, Handler: handler}
}

/* FillWebPost swagger:route POST /fillWeb/{website}/wallet/{nickname} fillWebPost

FillWebPost fill web post API

*/
type FillWebPost struct {
	Context *middleware.Context
	Handler FillWebPostHandler
}

func (o *FillWebPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFillWebPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
