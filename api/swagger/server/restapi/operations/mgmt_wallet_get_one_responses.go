// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// MgmtWalletGetOneOKCode is the HTTP code returned for type MgmtWalletGetOneOK
const MgmtWalletGetOneOKCode int = 200

/*MgmtWalletGetOneOK Wallet retrieved.

swagger:response mgmtWalletGetOneOK
*/
type MgmtWalletGetOneOK struct {

	/*
	  In: Body
	*/
	Payload *models.Wallet `json:"body,omitempty"`
}

// NewMgmtWalletGetOneOK creates MgmtWalletGetOneOK with default headers values
func NewMgmtWalletGetOneOK() *MgmtWalletGetOneOK {

	return &MgmtWalletGetOneOK{}
}

// WithPayload adds the payload to the mgmt wallet get one o k response
func (o *MgmtWalletGetOneOK) WithPayload(payload *models.Wallet) *MgmtWalletGetOneOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get one o k response
func (o *MgmtWalletGetOneOK) SetPayload(payload *models.Wallet) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOneOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MgmtWalletGetOneBadRequestCode is the HTTP code returned for type MgmtWalletGetOneBadRequest
const MgmtWalletGetOneBadRequestCode int = 400

/*MgmtWalletGetOneBadRequest Bad request.

swagger:response mgmtWalletGetOneBadRequest
*/
type MgmtWalletGetOneBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetOneBadRequest creates MgmtWalletGetOneBadRequest with default headers values
func NewMgmtWalletGetOneBadRequest() *MgmtWalletGetOneBadRequest {

	return &MgmtWalletGetOneBadRequest{}
}

// WithPayload adds the payload to the mgmt wallet get one bad request response
func (o *MgmtWalletGetOneBadRequest) WithPayload(payload *models.Error) *MgmtWalletGetOneBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get one bad request response
func (o *MgmtWalletGetOneBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOneBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MgmtWalletGetOneNotFoundCode is the HTTP code returned for type MgmtWalletGetOneNotFound
const MgmtWalletGetOneNotFoundCode int = 404

/*MgmtWalletGetOneNotFound Bad request.

swagger:response mgmtWalletGetOneNotFound
*/
type MgmtWalletGetOneNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetOneNotFound creates MgmtWalletGetOneNotFound with default headers values
func NewMgmtWalletGetOneNotFound() *MgmtWalletGetOneNotFound {

	return &MgmtWalletGetOneNotFound{}
}

// WithPayload adds the payload to the mgmt wallet get one not found response
func (o *MgmtWalletGetOneNotFound) WithPayload(payload *models.Error) *MgmtWalletGetOneNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get one not found response
func (o *MgmtWalletGetOneNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOneNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MgmtWalletGetOneUnprocessableEntityCode is the HTTP code returned for type MgmtWalletGetOneUnprocessableEntity
const MgmtWalletGetOneUnprocessableEntityCode int = 422

/*MgmtWalletGetOneUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response mgmtWalletGetOneUnprocessableEntity
*/
type MgmtWalletGetOneUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetOneUnprocessableEntity creates MgmtWalletGetOneUnprocessableEntity with default headers values
func NewMgmtWalletGetOneUnprocessableEntity() *MgmtWalletGetOneUnprocessableEntity {

	return &MgmtWalletGetOneUnprocessableEntity{}
}

// WithPayload adds the payload to the mgmt wallet get one unprocessable entity response
func (o *MgmtWalletGetOneUnprocessableEntity) WithPayload(payload *models.Error) *MgmtWalletGetOneUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get one unprocessable entity response
func (o *MgmtWalletGetOneUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOneUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MgmtWalletGetOneInternalServerErrorCode is the HTTP code returned for type MgmtWalletGetOneInternalServerError
const MgmtWalletGetOneInternalServerErrorCode int = 500

/*MgmtWalletGetOneInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response mgmtWalletGetOneInternalServerError
*/
type MgmtWalletGetOneInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMgmtWalletGetOneInternalServerError creates MgmtWalletGetOneInternalServerError with default headers values
func NewMgmtWalletGetOneInternalServerError() *MgmtWalletGetOneInternalServerError {

	return &MgmtWalletGetOneInternalServerError{}
}

// WithPayload adds the payload to the mgmt wallet get one internal server error response
func (o *MgmtWalletGetOneInternalServerError) WithPayload(payload *models.Error) *MgmtWalletGetOneInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mgmt wallet get one internal server error response
func (o *MgmtWalletGetOneInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MgmtWalletGetOneInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
